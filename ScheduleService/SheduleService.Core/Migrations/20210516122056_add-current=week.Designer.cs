// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SheduleService.Core.DataAccess;

namespace SheduleService.Core.Migrations
{
    [DbContext(typeof(ScheduleSystemContext))]
    [Migration("20210516122056_add-current=week")]
    partial class addcurrentweek
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.CurrentWeekNumber", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.ToTable("CurrentWeekNumbers");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.Group", b =>
                {
                    b.Property<int>("group_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("group_id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.Lesson", b =>
                {
                    b.Property<int>("lesson_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateRemoved")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCurrentSchedule")
                        .HasColumnType("boolean");

                    b.Property<string>("day_name")
                        .HasColumnType("text");

                    b.Property<string>("day_number")
                        .HasColumnType("text");

                    b.Property<int>("group_id")
                        .HasColumnType("integer");

                    b.Property<string>("lesson_full_name")
                        .HasColumnType("text");

                    b.Property<string>("lesson_name")
                        .HasColumnType("text");

                    b.Property<string>("lesson_number")
                        .HasColumnType("text");

                    b.Property<string>("lesson_room")
                        .HasColumnType("text");

                    b.Property<string>("lesson_type")
                        .HasColumnType("text");

                    b.Property<string>("lesson_week")
                        .HasColumnType("text");

                    b.Property<string>("teacher_name")
                        .HasColumnType("text");

                    b.Property<string>("time_end")
                        .HasColumnType("text");

                    b.Property<string>("time_start")
                        .HasColumnType("text");

                    b.HasKey("lesson_id");

                    b.HasIndex("group_id")
                        .IsUnique();

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.LessonInHistory", b =>
                {
                    b.Property<int>("LessonInHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("lesson_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("lesson_id")
                        .HasColumnType("integer");

                    b.HasKey("LessonInHistoryId");

                    b.HasIndex("lesson_id");

                    b.ToTable("LessonInHistories");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.LessonInformation", b =>
                {
                    b.Property<int>("LessonInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConferenceUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LessonInHistoryId")
                        .HasColumnType("integer");

                    b.HasKey("LessonInformationId");

                    b.HasIndex("LessonInHistoryId")
                        .IsUnique();

                    b.ToTable("LessonInformations");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.Teacher", b =>
                {
                    b.Property<int>("teacher_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("teacher_full_name")
                        .HasColumnType("text");

                    b.Property<string>("teacher_name")
                        .HasColumnType("text");

                    b.Property<string>("teacher_rating")
                        .HasColumnType("text");

                    b.Property<string>("teacher_short_name")
                        .HasColumnType("text");

                    b.Property<string>("teacher_url")
                        .HasColumnType("text");

                    b.HasKey("teacher_id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.TeacherOnLesson", b =>
                {
                    b.Property<int>("Lesson_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Teacher_Id")
                        .HasColumnType("integer");

                    b.HasKey("Lesson_Id", "Teacher_Id");

                    b.HasIndex("Teacher_Id");

                    b.ToTable("TeacherOnLessons");
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("group_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("group_id")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScheduleService.Models.CoreModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.Lesson", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.Group", "Group")
                        .WithOne("Lesson")
                        .HasForeignKey("ScheduleService.Models.CoreModels.Lesson", "group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.LessonInHistory", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.Lesson", "Lesson")
                        .WithMany("LessonInHistories")
                        .HasForeignKey("lesson_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.LessonInformation", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.LessonInHistory", "LessonInHistory")
                        .WithOne("LessonInformation")
                        .HasForeignKey("ScheduleService.Models.CoreModels.LessonInformation", "LessonInHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.TeacherOnLesson", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.Lesson", "Lesson")
                        .WithMany("Teachers")
                        .HasForeignKey("Lesson_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ScheduleService.Models.CoreModels.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("Teacher_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ScheduleService.Models.CoreModels.User", b =>
                {
                    b.HasOne("ScheduleService.Models.CoreModels.Group", "Group")
                        .WithOne("User")
                        .HasForeignKey("ScheduleService.Models.CoreModels.User", "group_id");
                });
#pragma warning restore 612, 618
        }
    }
}
